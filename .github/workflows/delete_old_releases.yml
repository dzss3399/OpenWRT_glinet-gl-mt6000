name: Delete Old Items

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    # Führe den Workflow einmal wöchentlich aus
    - cron: '0 0 * * 0'

jobs:
  maintenance:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Get All Releases
        id: all_releases
        run: |
          all_releases=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -X GET "https://api.github.com/repos/${{ github.repository }}/releases" \
              | jq -r '.[] | .id')
          # Sortiere die Release-IDs in umgekehrter Reihenfolge
          sorted_releases=($(printf '%s\n' "${all_releases[@]}" | sort -nr))

          # Entferne die letzten fünf Release-IDs aus dem Array
          num_to_keep=5
          for ((i=0; i<${num_to_keep}; i++)); do
              unset 'sorted_releases[${i}]'
          done

          # Speichere die zu löschenden Release-IDs in eine Datei
          printf '%s\n' "${sorted_releases[@]}" > releases_to_delete.txt

      - name: Delete Old Releases
        id: delete_old_releases
        run: |
          while read -r release_id; do
            curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -X DELETE "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
            echo "Release $release_id gelöscht"
          done < releases_to_delete.txt

      - name: Get All Workflow Runs
        id: all_workflow_runs
        run: |
          all_runs=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -X GET "https://api.github.com/repos/${{ github.repository }}/actions/runs" \
              | jq -r '.workflow_runs | .[] | .id')
          # Sortiere die Run-IDs in umgekehrter Reihenfolge
          sorted_runs=($(printf '%s\n' "${all_runs[@]}" | sort -nr))

          # Entferne die letzten fünf Run-IDs aus dem Array
          num_to_keep=5
          for ((i=0; i<${num_to_keep}; i++)); do
              unset 'sorted_runs[${i}]'
          done

          # Speichere die zu löschenden Run-IDs in eine Datei
          printf '%s\n' "${sorted_runs[@]}" > runs_to_delete.txt

      - name: Delete Old Workflow Runs
        id: delete_old_runs
        run: |
          while read -r run_id; do
            curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -X DELETE "https://api.github.com/repos/${{ github.repository }}/actions/runs/$run_id"
            echo "Workflow Run $run_id gelöscht"
          done < runs_to_delete.txt

      - name: Get All Tags
        id: all_tags
        run: |
          all_tags=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -X GET "https://api.github.com/repos/${{ github.repository }}/tags" \
              | jq -r '.[] | .name')
          # Sortiere die Tags in umgekehrter Reihenfolge
          sorted_tags=($(printf '%s\n' "${all_tags[@]}" | sort -nr))

          # Entferne die letzten fünf Tags aus dem Array
          num_to_keep=5
          for ((i=0; i<${num_to_keep}; i++)); do
              unset 'sorted_tags[${i}]'
          done

          # Speichere die zu löschenden Tags in eine Datei
          printf '%s\n' "${sorted_tags[@]}" > tags_to_delete.txt

      - name: Delete Old Tags
        id: delete_old_tags
        run: |
          while read -r tag_name; do
            git push --delete origin "$tag_name"
            git tag --delete "$tag_name"
            echo "Tag $tag_name gelöscht"
          done < tags_to_delete.txt
